# 线性结构

0x00 什么是线性结构

0x01 线性结构有什么特点



# 顺序表

0x00 什么是顺序表
     将元素存储在一片连续的内存空间当中。

0x01 顺序表的结构种类
     一体式结构：存储的数据类型是一样的。比如int型，就只有int型的数据放在那一片内存空间当中。
     分离式结构：存储的数据类型不止一种。可能先存int型，然后再存一个str类型。
     
     当一体式结构的时候，可以通过  首数据 的地址，加上偏移量直接进行寻址来找到数据。
     当分离式结构的时候，不能直接通过偏移进行寻址，要通过具体地址来寻找数据。
     

0x02 顺序表的组成
     表头信息+数据。
     
     一体式结构：（地址）+数据；
     分离式结构：（地址+数据）+（地址+数据）。

0x03 顺序表的特点
     在内存当中的存储是连续的。

0x04 顺序表的操作
     顺序表添加元素；
     顺序表删除元素。
     
0x05 顺序表的作用
     用于数据存储。

0x06 代码实现


# 链表

0x00 什么是链表
     将元素存储在非连续的内存空间中。

0x01 链表的类型
     a.单链表
     
0x02 链表的组成
     a.单链表的组成：
     头结点=值+指向下一个结点的指针
     中间若干节点
     尾结点=值+指向一个空值的指针

0x05 单链表的操作
     增删改查

0x04 链表的作用
     a.单链表的作用
       将数据存储在一段不连续的内存空间当中。

0x03 链表的实现
     a.单链表的实现
     
     先实现一个节点的创建
     
     # 节点

     # 节点包含：当前节点的数据内容
     #           和指向下一个节点的指针
     # 链表中节点的实现
     class SingleNode(object):
         def __init__(self, item):
             # 当前节点的内容
             self.item = item
             # 指向下一个节点的指针
             self.next = None

     node_one = SingleNode(1)
     print(node_one)
     print(f'内容为{node_one.item}')
     print(f'下一节点的指针为{node_one.next}')

     <__main__.SingleNode object at 0x00000281DF3628C8>
     内容为1
     下一节点的指针为None
     >>> 
     
     然后实现单链表的创建：
     
     # 单链表
     # 首先要给单链表一个默认的属性：头节点,如果没有传入头节点，默认头节点为空。
     class SingleLinkList(object):
         def __init__(self, node=None):
             self.head = node

         # 然后判断单链表是否为空
         # 因为目前单链表中还未添加任何节点，所以仅需要判断是否传入头节点即可
         def is_empty(self):
             # 如果没有传入头节点，单链表为空，self.head为None，not None就为True
             print(not self.head)
             return not self.head

     '''
     a = SingleLinkList()
     a.is_empty()
     
     >>> True
     '''
     
         # 获取链表长度
         # 这时引入了一个当前指针对象的概念，写做cur
         # 先将cur指向头节点，然后遍历链表，直到cur指向后继节点为None停止遍历。
         def get_length(self):
             cur = self.head
             count = 0

             while cur is not None:
                 count += 1
                 cur = cur.next
             print(count)
             return count
     '''
     a.get_length()
     
     >>> 0
     '''
     
         # 遍历链表
         # 先将cur指向头节点，然后遍历，用cur = cur.next()往下走，直到cur指向None，结束遍历
         def travel(self):
             cur = self.head

             while cur is not None:
                 print(cur.item)
                 cur = cur.next
     '''
     a.travel()
     
     >>>
     '''
         # 头部增加节点
         # 为了不丢失头部的指针，需要先将新增节点的next指针域指向当前单链表的头节点（无论有没有头节点），
         # 然后将当前单链表的头节点指向新增节点
         def add(self):
             node = SingleNode(10)
             if self.head is None:
                 self.head = node
                 return

             node.next = self.head
             self.head = node

     '''
     a.add()
     a.add()
     a.add()
     a.add()
     a.travel()
     
     >>> 
     10
     10
     10
     10
     '''
     
         # 在尾部增加节点
         # 当节点的next指针指向None的时候，先不指向None，而是指向新添加的节点
         def append(self, item):
             node = SingleNode(item)

             # 当是空链表的时候，尾部增加的节点也是头节点
             if self.is_empty():
                 self.head = node
                 return

             # 如果单链表不为空，当节点的next指针指向None的时候，先不指向None，而是指向新添加的节点
             else:
                 cur = self.head
                 while cur.next is not None:
                     cur = cur.next

                 cur.next = node
     '''
     a = SingleLinkList()
     # a.is_empty()
     # a.get_length()
     # a.travel()
     a.add()
     a.add()
     a.add()
     a.add()
     a.travel()

     a.append(500)
     a.travel()
     
     >>>
     10
     10
     10
     10
     False
     10
     10
     10
     10
     500
     '''
